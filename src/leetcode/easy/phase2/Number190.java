package leetcode.easy.phase2;

import method.BitOperation;

/**
 * @author qcy
 * @create 2020/11/05 14:07:48
 * 190. 颠倒二进制位
 * 
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 * 示例 1：
 *
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 *
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 *
 */
public class Number190 {

    @BitOperation
    public int reverseBits(int n) {
        int res = 0;
        for (int i = 31; i >= 0; i--) {
            //获取n最右侧的位,并翻转到相应的位置
            res |= (n & 1) << i;
            //n右移
            n >>= 1;
        }
        return res;
    }

    public static void main(String[] args) {
        int n = 0b00000010100101000001111010011100;
        System.out.println(new Number190().reverseBits(n));
    }
}
